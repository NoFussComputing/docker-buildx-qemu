

include:
  - project: nofusscomputing/projects/gitlab-ci
    ref: development
    file:
      - .gitlab-ci_common.yaml
      - type/docker-image.gitlab-ci.yaml


variables:
  MY_PROJECT_ID: "45926238"

  GIT_SYNC_URL: "https://$GITHUB_USERNAME_ROBOT:$GITHUB_TOKEN_ROBOT@github.com/NoFussComputing/docker-buildx-qemu.git"

  #JOB_STOP_CONVENTIONAL_COMMITS: 'disable for testing'
  #JOB_STOP_GIT_PUSH_MIRROR: 'disable for testing'
  #JOB_STOP_GITLAB_RELEASE: 'disable for testing'

  DOCKER_IMAGE_BUILD_TARGET_PLATFORMS: "linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/arm/v7"
    # Package docker-ce-cli is not available for:
    #   - linux/arm/v6
    #   - linux/386
  #DOCKER_IMAGE_BUILD_TARGET_PLATFORMS: "linux/arm64"
  DOCKER_IMAGE_PUBLISH_NAME: $CI_PROJECT_NAME
  DOCKER_IMAGE_PUBLISH_REGISTRY: docker.io/nofusscomputing
  DOCKER_IMAGE_PUBLISH_URL: https://hub.docker.com/r/nofusscomputing/$DOCKER_IMAGE_PUBLISH_NAME







.build_docker_container:
  stage: build
  image: nofusscomputing/docker-buildx-qemu:dev
  services:
    - name: docker:23-dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_DOCKERFILE: Dockerfile
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - if [ "0$JOB_ROOT_DIR" == "0" ]; then ROOT_DIR=gitlab-ci; else ROOT_DIR=$JOB_ROOT_DIR ; fi
    - echo "[DEBUG] ROOT_DIR[$ROOT_DIR]"
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    #- pip3 install -r gitlab-ci/gitlab_release/requirements.txt
    - pip3 install setuptools wheel
    - pip install -r $ROOT_DIR/conventional_commits/requirements.txt
    - pip3 install gitlab-ci/gitlab_release/python-module/cz_nfc/.
    - update-binfmts --enable # Important: Ensures execution of other binary formats is enabled in the kernel
    #- docker buildx create --driver=docker-container --driver-opt image=moby/buildkit:v0.11.6 --use
    - docker buildx create --driver=docker-container --use
    - docker buildx inspect --bootstrap
    # - apt list --installed
    # - rm -f /var/cache/ldconfig/aux-cache
    # - /sbin/ldconfig
    #- cp $(which qemu-aarch64-static) /usr/bin/qemu-aarch64 does nothing
    - apt remove -y qemu-user-static


  #       --label org.opencontainers.image.url="$CI_PROJECT_URL/-/releases/$(cz -n cz_nfc version --project)" \
  #       --label org.opencontainers.image.version="$(cz -n cz_nfc version --project)" \
  script: |

    if [ "0$DOCKER_IMAGE_BUILD_TARGET_PLATFORMS" != "0" ]; then

      echo "[DEBUG] building multiarch/specified arch image";

      docker buildx build --platform=$DOCKER_IMAGE_BUILD_TARGET_PLATFORMS . \
        --label org.opencontainers.image.created="$(date '+%Y-%m-%d %H:%M:%S%:z')" \
        --label org.opencontainers.image.documentation="$CI_PROJECT_URL" \
        --label org.opencontainers.image.source="$CI_PROJECT_URL" \
        --label org.opencontainers.image.revision="$CI_COMMIT_SHA" \
      --push \
      --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --build-arg CI_PROJECT_ID=$CI_PROJECT_ID --build-arg CI_API_V4_URL=$CI_API_V4_URL \
      --file $DOCKER_DOCKERFILE \
      --tag $DOCKER_IMAGE_BUILD_REGISTRY/$DOCKER_IMAGE_BUILD_NAME:$DOCKER_IMAGE_BUILD_TAG;

      docker buildx imagetools inspect $DOCKER_IMAGE_BUILD_REGISTRY/$DOCKER_IMAGE_BUILD_NAME:$DOCKER_IMAGE_BUILD_TAG;

      # during docker multi platform build there are >=3 additional unknown images added to gitlab container registry. cleanup
      
      DOCKER_MULTI_ARCH_IMAGES=$(docker buildx imagetools inspect "$DOCKER_IMAGE_BUILD_REGISTRY/$DOCKER_IMAGE_BUILD_NAME:$DOCKER_IMAGE_BUILD_TAG" --format "{{ range .Manifest.Manifests }}{{ if ne (print .Platform) \"&{unknown unknown  [] }\" }}$DOCKER_IMAGE_BUILD_REGISTRY/$DOCKER_IMAGE_BUILD_NAME:$DOCKER_IMAGE_BUILD_TAG@{{ println .Digest }}{{end}} {{end}}");

      docker buildx imagetools create $DOCKER_MULTI_ARCH_IMAGES --tag $DOCKER_IMAGE_BUILD_REGISTRY/$DOCKER_IMAGE_BUILD_NAME:$DOCKER_IMAGE_BUILD_TAG;

      docker buildx imagetools inspect $DOCKER_IMAGE_BUILD_REGISTRY/$DOCKER_IMAGE_BUILD_NAME:$DOCKER_IMAGE_BUILD_TAG;

    else

      echo "[DEBUG] building image";

      docker build . \
        --label org.opencontainers.image.created="$(date '+%Y-%m-%d %H:%M:%S%:z')" \
        --label org.opencontainers.image.documentation="$CI_PROJECT_URL" \
        --label org.opencontainers.image.source="$CI_PROJECT_URL" \
        --label org.opencontainers.image.url="$CI_PROJECT_URL/-/releases/$(cz -n cz_nfc version --project)" \
        --label org.opencontainers.image.version="$(cz -n cz_nfc version --project)" \
        --label org.opencontainers.image.revision="$CI_COMMIT_SHA" \
      --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --build-arg CI_PROJECT_ID=$CI_PROJECT_ID --build-arg CI_API_V4_URL=$CI_API_V4_URL \
      --file $DOCKER_DOCKERFILE \
      --tag $DOCKER_IMAGE_BUILD_REGISTRY/$DOCKER_IMAGE_BUILD_NAME:$DOCKER_IMAGE_BUILD_TAG;
    
    docker push $DOCKER_IMAGE_BUILD_REGISTRY/$DOCKER_IMAGE_BUILD_NAME:$DOCKER_IMAGE_BUILD_TAG;

    fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_TAG
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "development"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH != "master"'
      when: always
    - when: never


Docker Container:
  extends: .build_docker_container


